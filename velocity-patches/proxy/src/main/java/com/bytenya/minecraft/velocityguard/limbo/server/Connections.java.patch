diff --git a/proxy/src/main/java/com/bytenya/minecraft/velocityguard/limbo/server/Connections.java b/proxy/src/main/java/com/bytenya/minecraft/velocityguard/limbo/server/Connections.java
new file mode 100644
index 00000000..94b0844c
--- /dev/null
+++ b/proxy/src/main/java/com/bytenya/minecraft/velocityguard/limbo/server/Connections.java
@@ -0,0 +1,57 @@
+/*
+ * Copyright (C) 2020 Nan1t
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package com.bytenya.minecraft.velocityguard.limbo.server;
+
+import com.bytenya.minecraft.velocityguard.limbo.connection.ClientConnection;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Map;
+import java.util.UUID;
+import java.util.concurrent.ConcurrentHashMap;
+
+public final class Connections {
+    private static final Logger logger = LogManager.getLogger(Connections.class);
+
+    private final Map<UUID, ClientConnection> connections;
+
+    public Connections() {
+        connections = new ConcurrentHashMap<>();
+    }
+
+    public Collection<ClientConnection> getAllConnections() {
+        return Collections.unmodifiableCollection(connections.values());
+    }
+
+    public int getCount() {
+        return connections.size();
+    }
+
+    public void addConnection(ClientConnection connection) {
+        connections.put(connection.getUuid(), connection);
+        logger.info("Player {} connected ({}) [{}]", connection.getUsername(),
+                connection.getAddress(), connection.getClientVersion());
+    }
+
+    public void removeConnection(ClientConnection connection) {
+        connections.remove(connection.getUuid());
+        logger.info("Player {} disconnected", connection.getUsername());
+    }
+}
