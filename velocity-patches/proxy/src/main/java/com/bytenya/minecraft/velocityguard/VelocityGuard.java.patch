diff --git a/proxy/src/main/java/com/bytenya/minecraft/velocityguard/VelocityGuard.java b/proxy/src/main/java/com/bytenya/minecraft/velocityguard/VelocityGuard.java
new file mode 100644
index 00000000..f44c300c
--- /dev/null
+++ b/proxy/src/main/java/com/bytenya/minecraft/velocityguard/VelocityGuard.java
@@ -0,0 +1,48 @@
+package com.bytenya.minecraft.velocityguard;
+
+import com.bytenya.minecraft.velocityguard.api.VgServer;
+import com.velocitypowered.proxy.VelocityServer;
+import com.velocitypowered.proxy.connection.MinecraftConnection;
+import io.netty.channel.Channel;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import java.nio.file.Path;
+
+public class VelocityGuard implements VgServer {
+  private static final Logger logger = LogManager.getLogger(VelocityGuard.class);
+
+  public final VelocityServer server;
+  public final VgConfig config;
+  public final VgEventFactory eventFactory;
+
+  public VelocityGuard(VelocityServer server) {
+    this.server = server;
+    this.config = loadConfig();
+    this.eventFactory = new VgEventFactory(this);
+  }
+
+  private VgConfig loadConfig() {
+    try {
+      Path velocityGuardConfigPath = Path.of("velocityguard.toml");
+      VgConfig config = VgConfig.read(velocityGuardConfigPath);
+
+      if (!config.validate()) {
+        logger.error("Your VelocityGuard configuration is invalid. Velocity will not start up until the errors are resolved.");
+        LogManager.shutdown();
+        System.exit(1);
+        throw new Error();
+      }
+      return config;
+    } catch (Exception e) {
+      logger.error("Unable to read/load/save your velocityguard.toml. The server will shut down.", e);
+      LogManager.shutdown();
+      System.exit(1);
+      throw new Error();
+    }
+  }
+
+  public VgConnection createConnection(Channel channel, MinecraftConnection minecraftConnection) {
+    return new VgConnection(this, channel, minecraftConnection);
+  }
+}
